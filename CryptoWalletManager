// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract CryptoWalletManager is Ownable {
    mapping(address => mapping(address => uint256)) public balances;

    // Events
    event Deposit(address indexed token, address indexed user, uint256 amount);
    event Withdraw(address indexed token, address indexed user, uint256 amount);

    // Deposit tokens into the wallet
    function deposit(address token, uint256 amount) external {
        require(amount > 0, "Amount must be greater than zero");
        require(IERC20(token).transferFrom(msg.sender, address(this), amount), "Transfer failed");

        balances[msg.sender][token] += amount;

        emit Deposit(token, msg.sender, amount);
    }

    // Withdraw tokens from the wallet
    function withdraw(address token, uint256 amount) external {
        require(amount > 0, "Amount must be greater than zero");
        require(balances[msg.sender][token] >= amount, "Insufficient balance");

        balances[msg.sender][token] -= amount;
        require(IERC20(token).transfer(msg.sender, amount), "Transfer failed");

        emit Withdraw(token, msg.sender, amount);
    }

    // Get token balance of a user
    function getBalance(address user, address token) external view returns (uint256) {
        return balances[user][token];
    }

    // Owner can withdraw accidentally sent ERC20 tokens
    function recoverTokens(address token, uint256 amount) external onlyOwner {
        require(IERC20(token).transfer(owner(), amount), "Transfer failed");
    }
}
